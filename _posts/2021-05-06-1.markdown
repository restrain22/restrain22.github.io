---
layout: post
title:  "프로그래머스 완주하지 못한 선수"
date:   2021-05-06 11:30:00 +0900
categories: jekyll update
---
# 프로그래머스 완주하지 못한 선수
  
오늘은 자료구조부터 다시 공부하기로 하여 프로그래머스에서 해시 연습 문제를 확인했다.

C로 링크드리스트를 활용한 체이닝 해시테이블만 만들다가 C++의 라이브러리를 활용해보았다.

C++에서 공식적으로 제공하는 해시테이블인 unordered_map 이라는 자료형이 있는 것을 알게되었고

같이 따라 나오는 map에 대해서도 간략하게 이해할 수 있었다.

### unordered_map

unordered_map이란 C++에서 STL 표준으로 지정된 자료구조이다.

비록 이전에는 hash_map이라는 비표준 자료구조를 사용했지만, 현재는 unordered_map을 공식 지원하여 활용해보기로 했다.

unordered_map은 해시테이블로 구현한 자료구조로 시간복잡도는 O(1)이다. 즉 순서가 없고 key값으로 원하는 데이터를 단번에 검색 가능하다.

데이터의 중복을 허용하지 않아 다량의 데이터 처리에 좋은 성능을 보인다. 하지만 유사한 key가 많을 시 해시 충돌이 발생하여 성능이 저하될 수 있다.

사용법으로는 #include<unordered_map>을 선언해야 한다.

### unordered_map 함수

 1. 데이터 입력
	
	데이터 입력 시 활용할 수 있는 방법은 두 가지 이다.
	
	첫째. insert()를 활용하는 방법이다.
	
	make_pair(key,value)를 활용하여 pair 형태로 추가한다.
	{% highlight ruby %}
	insert(make_pair(key,value));
	{% endhighlight %}

	둘쨰. unordered_map은 키값을 접근만 해도 해당 키 값이 할당되어 하나의 공간을 가진다.
	
	만약 unordered_map은["20210506"]; 와 같이 테이블 안에 키 값 "20210506"이 있는지 접근하면 공간을 할당해버린다.
	
	그래서 위와 같이 선언한 후, unordered_map은["20210506"].count()로 키 값이 있는 지 검색하면 1이라는 카운트 수를 반환한다.
	
 2. 데이터 삭제
 
	erase(key)를 사용하여 특정 키 값을 삭제할 수 있다.
	
	또한 claer()를 통해 전체 삭제가 가능하다.
	
 3. key 존재 확인
 
	key 존재를 확인하는 방법으로는 두 가지 방법이 있다.
	
	첫째. find()
	
	find(key)는 맵 안에 해당하는 key의 위치를 반환하는 함수이다.
	
	iterator와 같이 front부터 end까지의 위치 중 해당하는 위치를 반환한다.
	
	둘쨰. count()
	
	count(key)는 단순히 맵 안에 해당하는 key의 갯수를 반환하는 함수이다.
	
	중복을 허용하지 않으므로 반환 가능한 값은 1 또는 0 이다.
	
 4. 크기 확인 함수
 
	맵의 크기 또는 비었는 지 확인할 수 있는 방법이 있다.
	
	size()는 현재 크기를, empty()는 맵이 비어있는지 확인하는 함수이다.
	
### 문제 해설

문제를 풀면서 unordered_map에 대해 공부하는 시간을 갖았고, 습득한 지식을 활용하여 어떻게 문제를 해결할지 고민했다.

우선 unordered_map에서는 중복 값을 허용하지 않는다고 했다. 하지만 문제에선 중복 값이 주어졌고 이 중복값을 어떻게 처리하는지에 따라 정답 도출에 지대한 영향을 끼칠 것으로 생각했다.

그래서 이 문제에서 주어진 이름 값은 key, key의 출현 빈도를 value값으로 활용하기로 결정했다.

우선 맵에 participant라는 벡터의 값을 전부 집어 넣는다. 이 중에 중복값은 체크하여 해당 key의 value값만 증가시킨다.

그리고는 completion 벡터에 있는 값들을 맵에서 검색하여 value값을 차감한다.

completion의 크기는 participant의 크리보다 반드시 1이 작다고 가정하였으므로, completion을 다 차감하고 나면 반드시 한 개의 partipant 값이 남게된다.

이 값이 바로 return 값인 완주하지 못한 선수이다.

### 소스 코드

1. 검색과 동시에 값 할당하기
{% highlight ruby %}

#include<iostream>
#include<vector>
#include<algorithm>
#include<unordered_map>
using namespace std;

string solution(vector<string> participant, vector<string> completion);

int main() {

	//vector<string> paricipant = { "leo", "kiki", "eden" };
	//vector<string> completion = { "eden", "kiki" };

	vector<string> paricipant = { "mislav", "stanko", "mislav", "ana"};
	vector<string> completion = { "stanko", "ana", "mislav" };

	solution(paricipant, completion);

	return 0;
}

string solution(vector<string> participant, vector<string> completion) {
	unordered_map<string, int> hashTable;

	for (string name : participant) {
		++hashTable[name];
	}
	for (string name : completion) {
		--hashTable[name];
	}
	for (auto pair : hashTable) {
		if (pair.second > 0)
			return pair.first;
	}
}

{% endhighlight %}

2. 함수 사용하여 일일히 insert하기

{% highlight ruby %}

#include<iostream>
#include<vector>
#include<algorithm>
#include<unordered_map>
using namespace std;

string solution(vector<string> participant, vector<string> completion);

int main() {

	//vector<string> paricipant = { "leo", "kiki", "eden" };
	//vector<string> completion = { "eden", "kiki" };

	vector<string> paricipant = { "mislav", "stanko", "mislav", "ana"};
	vector<string> completion = { "stanko", "ana", "mislav" };

	solution(paricipant, completion);

	return 0;
}
string solution(vector<string> participant, vector<string> completion){
	unordered_map<string, int> hashTable;

	for (string name : completion) {
		//++hashTable[name];
		if (hashTable.end() == hashTable.find(name))
			hashTable.insert(make_pair(name, 1));
		else
			hashTable[name] += 1;
	}
	for (string name : participant) {
		if (hashTable.end() == hashTable.find(name))
			return name;
		else {
			hashTable[name] -= 1;
			if (hashTable[name] < 0)
				return name;
		}
	}
	for (auto pair : hashTable) {
		if (pair.second > 0)
			return pair.first;
	}
}
{% endhighlight %}


프로그래머스 완주하지 못한 선수